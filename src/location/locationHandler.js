const { request } = require('graphql-request')
const utils = require('../utils/index')

async function getCityBikeStations (userLocation) {
  const query = `
  {
    nearest(lat: ${userLocation.latitude}, lon: ${userLocation.longitude}, maxDistance: 1500, maxResults: 5, filterByPlaceTypes: BICYCLE_RENT) {
      edges {
        node {
          distance
          place {
            ... on BikeRentalStation {
              stationId
              name
              bikesAvailable
              spacesAvailable
              capacity
              state
              networks
            }
          }
        }
      }
    }
  }`
  const response = await request(utils.digitransitApi, query)
  const valmisViesti = stationListaus(response)
  return valmisViesti
}

function stationListaus (response) {
  let valmisViesti = '<b>Kaupunkipy√∂r√§asemat l√§hell√§si</b>\n\n'
  const edges = response.nearest.edges
  // Jos asemia ei l√∂ydy k√§ytt√§j√§n l√§helt√§
  if (response.nearest.edges.length === 0) {
    console.info('Ei asemia k√§ytt√§j√§n l√§hell√§')
    return 'Valitettavasti l√§helt√§si ei l√∂ydy asemia üòï'
  } else {
    // K√§yd√§√§n jokainen asema l√§pi
    for (let i = 0; i < edges.length; i++) {
      console.log(edges[i].node.place.networks[0])
      // Jos vantaan asemat otetaan stationId pois koska vantaan stationId:t = nonsense
      if (edges[i].node.place.networks[0] === 'vantaa') {
        // Tarkistaa onko asema k√§yt√∂ss√§ ja rakentaa viestin
        if (edges[i].node.place.state === 'Station off') {
          valmisViesti = valmisViesti + `<b>${edges[i].node.place.name}</b> ‚ûù ${edges[i].node.distance}m\nAsema ei ole k√§yt√∂ss√§.\n\n`
        } else {
          valmisViesti = valmisViesti + `<b>${edges[i].node.place.name}</b> ‚ûù ${edges[i].node.distance}m\nPy√∂ri√§ asemalla ${edges[i].node.place.bikesAvailable}/${edges[i].node.place.capacity}\n\n`
        }
      } else {
        // Helsinki & Espoo (smoove) tai muu
        // Tarkistaa onko asema k√§yt√∂ss√§ ja rakentaa viestin
        if (edges[i].node.place.state === 'Station off') {
          valmisViesti = valmisViesti + `<b>${edges[i].node.place.name}</b> ${edges[i].node.place.stationId} ‚ûù ${edges[i].node.distance}m\nAsema ei ole k√§yt√∂ss√§.\n\n`
        } else {
          valmisViesti = valmisViesti + `<b>${edges[i].node.place.name}</b> ${edges[i].node.place.stationId} ‚ûù ${edges[i].node.distance}m\nPy√∂ri√§ asemalla ${edges[i].node.place.bikesAvailable}/${edges[i].node.place.capacity}\n\n`
        }
      }
    }
  }
  return valmisViesti
}

module.exports = getCityBikeStations
